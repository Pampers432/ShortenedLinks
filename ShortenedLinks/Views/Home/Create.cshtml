@model UrlEntry

@{
    ViewData["Title"] = "Создать сокращенную ссылку";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="Create" id="urlForm">
    <div class="form-group mb-3">
        <label asp-for="LongUrl" class="form-label"></label>
        <input asp-for="LongUrl" class="form-control" placeholder="https://example.com" />
        <span asp-validation-for="LongUrl" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="ShortUrl" class="form-label"></label>
        <input asp-for="ShortUrl" class="form-control" placeholder="Оставьте пустым для автогенерации" readonly/>
        <span asp-validation-for="ShortUrl" class="text-danger"></span>
    </div>

    <div class="form-group mt-4">
        <button type="submit" class="btn btn-primary">Создать</button>
        <a asp-action="Index" class="btn btn-secondary">Отмена</a>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Клиентская проверка перед отправкой
            document.querySelector('form').addEventListener('submit', function(e) {
            const urlInput = document.getElementById('LongUrl');
            const url = urlInput.value.toLowerCase();
            const validDomains = ['.com', '.net', '.org', '.io'];

            // Проверка протокола
            if (!url.startsWith('http://') && !url.startsWith('https://')) {
                e.preventDefault();
                alert('URL должен начинаться с http:// или https://');
                urlInput.focus();
                return;
            }

            // Проверка домена
            if (!validDomains.some(d => url.includes(d))) {
                e.preventDefault();
                alert('URL должен содержать домен (.com, .net, .org, .io и т.д.)');
                urlInput.focus();
                return;
            }
        });
    </script>
}